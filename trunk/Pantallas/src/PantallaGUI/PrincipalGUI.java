/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PrincipalGUI.java
 *
 * Created on 09/10/2010, 12:20:38 PM
 */
package PantallaGUI;

import BaseDatos.BaseDatos;
import PantallaGUI.reloj.Reloj;
import PantallaGUI.reportes.Reportes;
import PantallaGUI.utilitarios.Utilitarios;
import comunicacion.ComunicacionPantalla;
import comunicacion.socket.SocketPantalla;
import comunicacion.socket.TestConexion;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import servicios.servidor.ServidorTurnos;

/**
 *
 * @author kradac
 */
public class PrincipalGUI extends javax.swing.JFrame {

    private Configuracion con;
    private Reportes reportes;
    private BaseDatos bd;
    private static Properties arcConfig;
    /**
     * Almacena los sockets de comunicación con cada una de las pantallas
     */
    public static SocketPantalla[] pantallas = new SocketPantalla[2];

    /** Creates new form PrincipalGUI */
    public PrincipalGUI() {
        super.setIconImage(new ImageIcon(getClass().getResource("/iconos/kradac_icono.png")).getImage());
        bd = new BaseDatos();
        arcConfig = Utilitarios.obtenerArchivoPropiedades("configsystem.properties");
        initComponents();
        configurarBotones();
        iniciarServidorTurnos();
        System.out.println("Usuario: " + System.getProperty("user.name"));
        Reloj reloj = new Reloj();
        TestComunicacionRed();
    }

    private void iniciarServidorTurnos() {
        String comm = arcConfig.getProperty("comm");
        if (comm.equals("0")) {
            /**
             * Iniciar Comunicación con las pantallas disponibles
             */
            Thread pant1 = new Thread(new Runnable() {

                public void run() {
                    pantallas[0] = new SocketPantalla(1, lblIconPantalla1);
                }
            });


            Thread pant2 = new Thread(new Runnable() {

                public void run() {
                    pantallas[1] = new SocketPantalla(2, lblIconPantalla2);
                }
            });

            pant1.start();
            pant2.start();
        }
        ServidorTurnos serverTurnos = new ServidorTurnos(bd, arcConfig);
    }

    private void configurarBotones() {
        btnConfigurar.setText("<html><center>Configurar<br>Pantalla</center></html>");

        btnConfigurar.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnConfigurar.setHorizontalTextPosition(SwingConstants.CENTER);

        btnReportes.setText("<html><center>Reportes y<br>Estadísticas</center></html>");

        btnReportes.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnReportes.setHorizontalTextPosition(SwingConstants.CENTER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnConfigurar = new javax.swing.JButton();
        btnReportes = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblIconPantalla1 = new javax.swing.JLabel();
        lblIconPantalla2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Administrador de Trunos");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnConfigurar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/config.png"))); // NOI18N
        btnConfigurar.setText("Configurar Pantalla");
        btnConfigurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigurarActionPerformed(evt);
            }
        });

        btnReportes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/estadistica.png"))); // NOI18N
        btnReportes.setText("Reportes");
        btnReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(btnConfigurar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(btnReportes, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReportes, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfigurar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/salir.png"))); // NOI18N
        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Administración de Turnos");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        lblIconPantalla1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/panOff.png"))); // NOI18N

        lblIconPantalla2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/panOff.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                        .addComponent(lblIconPantalla1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblIconPantalla2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblIconPantalla2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblIconPantalla1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-356)/2, (screenSize.height-286)/2, 356, 286);
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfigurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigurarActionPerformed
        if (con == null) {
            con = new Configuracion(bd, arcConfig);
        } else {
            con.dispose();
            con = new Configuracion(bd, arcConfig);
        }
    }//GEN-LAST:event_btnConfigurarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        bd.cerrarConexionBaseDatos();
        try {
            pantallas[0].desconectar();
        } catch (IndexOutOfBoundsException ex) {
            System.out.println("NO hay conexión por socket que cerrar - Pantalla 1");
        } catch (NullPointerException ex) {
        }
        try {
            pantallas[1].desconectar();
        } catch (IndexOutOfBoundsException ex) {
            System.out.println("NO hay conexión por socket que cerrar - Pantalla 2");
        } catch (NullPointerException ex) {
        }
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportesActionPerformed
        if (reportes == null) {
            reportes = new Reportes(bd);
        } else {
            reportes.dispose();
            reportes = new Reportes(bd);
        }
    }//GEN-LAST:event_btnReportesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {

                try {
                    // UIManager.setLookAndFeel("org.pushingpixels.substance.api.skin.SubstanceOfficeBlue2007LookAndFeel");
                    // UIManager.setLookAndFeel("org.pushingpixels.substance.api.skin.SubstanceDustLookAndFeel");
                    // UIManager.setLookAndFeel("org.pushingpixels.substance.api.skin.SubstanceMistSilverLookAndFeel");
                    // UIManager.setLookAndFeel("org.pushingpixels.substance.api.skin.SubstanceNebulaBrickWallLookAndFeel");
                    UIManager.setLookAndFeel("org.pushingpixels.substance.api.skin.SubstanceSaharaLookAndFeel");
                } catch (Exception e) {
                    System.out.println("Problemas al cargar Temas Substance");
                }
                new PrincipalGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfigurar;
    private javax.swing.JButton btnReportes;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblIconPantalla1;
    private javax.swing.JLabel lblIconPantalla2;
    // End of variables declaration//GEN-END:variables

    /**
     * Permite igualar las pantallas cuando el reloj llegue a una hora determinada
     * todos los dias...
     * @param hora
     * @param intPantalla
     */
    public static void igualarHoras(String hora, int intPantalla) {
        String booEnvioConPausa = "&%true";
        /**
         * Comandos para las placas a lado del pasa mensajes pantalla grande
         */
        String comandoP2 = Configuracion.conversionHoraPantalla2(hora);

        /**
         * Enviar sin pausa a la pantalla todo en rafaga
         */
        comandoP2 += "&%false";
        ComunicacionPantalla enlacePantalla = new ComunicacionPantalla(comandoP2, arcConfig, intPantalla);

        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(PrincipalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        /**
         * Comando para el pasa mensajes
         */
        String comando = "t" + hora + "\r" + booEnvioConPausa;
        ComunicacionPantalla pasaMensajes = new ComunicacionPantalla(comando, arcConfig, intPantalla);
    }

    /**
     * Permite enviar un . cada segundo a la pantalla para ver si aun existe
     * comunicación con la IP.
     */
    private void TestComunicacionRed() {
        TestConexion testCanal = new TestConexion();
        testCanal.start();
    }
}
